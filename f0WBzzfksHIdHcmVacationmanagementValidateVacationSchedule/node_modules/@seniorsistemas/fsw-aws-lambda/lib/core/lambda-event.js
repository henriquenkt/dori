const environments = require('./environments');
const lambdaAuth = require('../core/lambda-auth');

function parseBody(event) {
    if (typeof event.body === 'string') {
        return JSON.parse(event.body);
    }
    return event.body || {};
}

function createEventInfo(event, environmentData) {
    const environment = getEnvironment(event);
    const development = environment === 'development';
    environmentData = environmentData || environments[environment] || {};

    return {
        environment,
        development,
        production: !development,
        platformUrl: environmentData.basePlatformUrl,
        authPlatformUrl: environmentData.externalAuthPlatformUrl,
        platformToken: getToken(event, development, environmentData.bearerToken),
        tenantName: getTenantName(event),
        originalEvent: event
    };
}

async function createEventInfoWithAuthentication(event, accessKey, secretKey, environmentData) {  
    let tempEventInfo = createEventInfo(event, environmentData);
    tempEventInfo.lambdaToken = await lambdaAuth.authenticate(accessKey, secretKey, tempEventInfo);
    return tempEventInfo;
}

function getEnvironment(event) {
    return event.environment || (event.development ? 'development' : 'production');
}

function getTenantName(event) {
    let tenantName;
    if (event.headers) {
        tenantName = event.headers['X-Senior-Tenant'];
    }

    return tenantName || 'Tenant n√£o recebido no evento';
}

function getToken(event, isDevelopment, defaultToken) {
    if (isDevelopment) {
        return defaultToken || environments.development.bearerToken;
    }

    let token;
    if (event.headers) {
        token = event.headers['X-Senior-Token'];
    }

    return token || defaultToken || '';
}

module.exports = {
    parseBody,
    createEventInfo,
    createEventInfoWithAuthentication
};
